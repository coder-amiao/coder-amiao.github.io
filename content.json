{"meta":{"title":"三时","subtitle":"","description":"程序员三时 个人博客, 分享经验干货，记录开发历程,乐于分享，爱好码字，沉迷于折腾","author":"程序员三时","url":"http://example.com"},"pages":[],"posts":[{"title":"集合遍历与循环多种方式","slug":"集合遍历与循环多种方式","date":"2023-04-17T17:39:52.000Z","updated":"2023-04-18T07:35:01.464Z","comments":true,"path":"2023/04/18/集合遍历与循环多种方式clglz0rh200005l6o07vdf9qf.html","link":"","permalink":"http://example.com/2023/04/18/%E9%9B%86%E5%90%88%E9%81%8D%E5%8E%86%E4%B8%8E%E5%BE%AA%E7%8E%AF%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8Fclglz0rh200005l6o07vdf9qf.html","excerpt":"","text":"前言Java中集合是非常常用非常重要的 ，应用是十分广泛的，作为集合这种数据结构，遍历循环方式也有很多种我们可以梳理总结不同的遍历方式，方便理解和运用 List 遍历方式 List继承了Collection，是有序的列表。 实现类有ArrayList、LinkedList、Vector、Stack等 ArrayList是基于数组实现的，是一个数组队列。可以动态的增加容量！ LinkedList是基于链表实现的，是一个双向循环列表。可以被当做堆栈使用！ Vector是基于数组实现的，是一个矢量队列，是线程安全的！ Stack是基于数组实现的，是栈，它继承与Vector，特性是FILO（先进后出）！ 所有list集合都是迭代器Iterator子类也都统称迭代器，可以通过迭代器方式去循环便利 第一种方式 迭代器遍历123456789101112List a= new ArrayList(); a.add(1); a.add(2); a.add(3); //获取迭代器 Iterator b=a.iterator(); //判断是否有下一个值 while (b.hasNext())&#123; //取出这个值 System.out.println(b.next()); &#125; 第二种方式 1234567List a= new ArrayList(); a.add(1); a.add(2); a.add(3); for(Iterator iterator=a.iterator();iterator.hasNext();)&#123; System.out.println(iterator.next()); &#125; 第三种方式 foreach 遍历 1234567List a= new ArrayList(); a.add(1); a.add(2); a.add(3); for(Object o:a)&#123; System.out.println(o); &#125; 第四种方式 fori 遍历 1234567List a= new ArrayList(); a.add(1); a.add(2); a.add(3); for(int i=0;i&lt;a.size();i++)&#123; System.out.println(a.get(i)); &#125; Map遍历方式 按照key方式来遍历 12345678910Map a=new HashMap(); a.put(&quot;a&quot;,1); a.put(&quot;b&quot;,2); a.put(&quot;c&quot;,3); //获取所以key Set key=a.keySet(); for(Object o:key)&#123; //通过key 来获取所有值 System.out.println(a.get(o)); &#125; 通过Map.entrySet使用iterator遍历key和value 1234567891011Map a=new HashMap(); a.put(&quot;a&quot;,1); a.put(&quot;b&quot;,2); a.put(&quot;c&quot;,3); // 获取Iterator Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; it = a.entrySet().iterator(); //遍历 while (it.hasNext()) &#123; Map.Entry&lt;String, Integer&gt; entry = it.next(); System.out.println(&quot;key= &quot; + entry.getKey() + &quot; and value= &quot; + entry.getValue()); &#125; 通过Map.entrySet遍历key和value，推荐，尤其是容量大时 1234567891011Map a=new HashMap(); a.put(&quot;a&quot;,1); a.put(&quot;b&quot;,2); a.put(&quot;c&quot;,3); for ( Object o : a.entrySet()) &#123; //Map.entry&lt;Integer,String&gt; 映射项（键-值对） 有几个方法：用上面的名字entry //entry.getKey() ;entry.getValue(); entry.setValue(); //map.entrySet() 返回此映射中包含的映射关系的 Set视图。 Map.Entry&lt;String,Integer&gt; d=(Map.Entry&lt;String,Integer&gt; )o; System.out.println(&quot;key= &quot; + d.getKey() + &quot; and value= &quot; + d.getValue()); &#125; 通过Map.values()遍历所有的value，但不能遍历key 12345678Map a = new HashMap(); a.put(&quot;a&quot;, 1); a.put(&quot;b&quot;, 2); a.put(&quot;c&quot;, 3); for (Object o : a.values()) &#123; System.out.println(o); &#125; Stream流API遍历 stream集合遍历forEach 1234567891011List&lt;String&gt; a=new ArrayList&lt;&gt;();a.add(&quot;judy&quot;);a.add(&quot;Tom&quot;);//lambda表达式a.stream().forEach(s -&gt; System.out.println(s));a.stream().forEach(s -&gt; &#123; System.out.println(s); System.out.println(2);&#125;);","categories":[{"name":"后端","slug":"后端","permalink":"http://example.com/categories/%E5%90%8E%E7%AB%AF/"},{"name":"Java","slug":"后端/Java","permalink":"http://example.com/categories/%E5%90%8E%E7%AB%AF/Java/"}],"tags":[{"name":"List","slug":"List","permalink":"http://example.com/tags/List/"},{"name":"Map","slug":"Map","permalink":"http://example.com/tags/Map/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"http://example.com/categories/%E5%90%8E%E7%AB%AF/"},{"name":"Java","slug":"后端/Java","permalink":"http://example.com/categories/%E5%90%8E%E7%AB%AF/Java/"}]}]}